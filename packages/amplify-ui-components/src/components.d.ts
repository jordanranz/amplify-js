/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  AuthState,
  AuthStateHandler,
  CognitoUserInterface,
  FederatedConfig,
  MFATypesInterface,
} from './common/types/auth-types';
import {
  FormFieldTypes,
} from './components/amplify-auth-fields/amplify-auth-fields-interface';
import {
  ButtonTypes,
  TextFieldTypes,
} from './common/types/ui-types';
import {
  FunctionalComponent,
} from '@stencil/core';
import {
  CountryCodeDialOptions,
} from './components/amplify-country-dial-code/amplify-country-dial-code-interface';
import {
  IconNameType,
} from './components/amplify-icon/icons';
import {
  AmplifySceneError,
} from './components/amplify-scene/amplify-scene-interface';
import {
  SelectOptionsNumber,
  SelectOptionsString,
} from './components/amplify-select/amplify-select-interface';

export namespace Components {
  interface AmplifyAmazonButton {
    /**
    * App-specific client ID from Google
    */
    'clientId': FederatedConfig['amazonClientId'];
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyAuthFields {
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields': FormFieldTypes | string[];
  }
  interface AmplifyAuth0Button {
    /**
    * See: https://auth0.com/docs/libraries/auth0js/v9#available-parameters
    */
    'config': FederatedConfig['auth0Config'];
    'handleAuthStateChange': AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyAuthenticator {
    /**
    * Federated credentials & configuration.
    */
    'federated': FederatedConfig;
    /**
    * Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp
    */
    'initialAuthState': AuthState;
  }
  interface AmplifyButton {
    /**
    * (Optional) Callback called when a user clicks on the button
    */
    'handleButtonClick': (evt: Event) => void;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
    /**
    * Type of the button: 'button', 'submit' or 'reset'
    */
    'type': ButtonTypes;
  }
  interface AmplifyCheckbox {
    /**
    * If `true`, the checkbox is selected.
    */
    'checked': boolean;
    /**
    * If `true`, the checkbox is disabled
    */
    'disabled': boolean;
    /**
    * Field ID used for the 'htmlFor' in the label
    */
    'fieldId': string;
    /**
    * Label for the checkbox
    */
    'label': string;
    /**
    * Name of the checkbox
    */
    'name'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
    /**
    * Value of the checkbox
    */
    'value'?: string;
  }
  interface AmplifyCodeField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId': string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Used as the hint in case you forgot your confirmation code, etc.
    */
    'hint': string | FunctionalComponent | null;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the code label
    */
    'label': string;
    /**
    * Used for the placeholder label
    */
    'placeholder': string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required': boolean;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyConfirmSignIn {
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields': FormFieldTypes | string[];
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * Fires when confirm sign in form is submitted
    */
    'handleSubmit': (Event: Event) => void;
    /**
    * Used for header text in confirm sign in component
    */
    'headerText': string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
    /**
    * Used for the submit button text in confirm sign in component
    */
    'submitButtonText': string;
    /**
    * Cognito user signing in
    */
    'user': CognitoUserInterface;
    /**
    * Engages when invalid actions occur, such as missing field, etc.
    */
    'validationErrors': string;
  }
  interface AmplifyConfirmSignUp {
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields': FormFieldTypes | string[];
    /**
    * Passed from the Authenticator component in order to change Authentication states e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * Fires when sign up form is submitted
    */
    'handleSubmit': (submitEvent: Event) => void;
    /**
    * Used for header text in confirm sign up component
    */
    'headerText': string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
    /**
    * Used for the submit button text in confirm sign up component
    */
    'submitButtonText': string;
    /**
    * Used for the username to be passed to resend code
    */
    'user': CognitoUserInterface;
    /**
    * Engages when invalid actions occur, such as missing field, etc.
    */
    'validationErrors': string;
  }
  interface AmplifyCountryDialCode {
    /**
    * The ID of the field.  Should match with its corresponding input's ID.
    */
    'fieldId': string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * The options of the country dial code select input.
    */
    'options': CountryCodeDialOptions;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyEmailField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId': string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the EMAIL label
    */
    'label': string;
    /**
    * Used for the placeholder label
    */
    'placeholder': string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required': boolean;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyExamples {}
  interface AmplifyFacebookButton {
    /**
    * App-specific client ID from Facebook
    */
    'appId': FederatedConfig['facebookAppId'];
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyFederatedButtons {
    /**
    * The current authentication state.
    */
    'authState': AuthState;
    /**
    * Federated credentials & configuration.
    */
    'federated': FederatedConfig;
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyFederatedSignIn {
    /**
    * The current authentication state.
    */
    'authState': AuthState;
    /**
    * Federated credentials & configuration.
    */
    'federated': any;
  }
  interface AmplifyForgotPassword {
    /**
    * The form fields displayed inside of the forgot password form
    */
    'formFields': FormFieldTypes;
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * The function called when making a request to reset password
    */
    'handleSend': (event: Event) => void;
    /**
    * The function called when submitting a new password
    */
    'handleSubmit': (event: Event) => void;
    /**
    * The header text of the forgot password section
    */
    'headerText': string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
    /**
    * The text displayed inside of the submit button for the form
    */
    'submitButtonText': string;
  }
  interface AmplifyFormField {
    /**
    * The text of the description.  Goes between the label and the input.
    */
    'description': string | null;
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * The ID of the field.  Should match with its corresponding input's ID.
    */
    'fieldId': string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * The text of a hint to the user as to how to fill out the input.  Goes just below the input.
    */
    'hint': string | FunctionalComponent | null;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * The text of the label.  Goes above the input. Ex: 'First name'
    */
    'label': string | null;
    /**
    * (Optional) String value for the name of the input.
    */
    'name'?: string;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
    /**
    * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
    */
    'placeholder'?: string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required': boolean;
    /**
    * The input type.  Can be any HTML input type.
    */
    'type'?: TextFieldTypes;
    /**
    * The value of the content inside of the input field
    */
    'value': string;
  }
  interface AmplifyFormSection {
    /**
    * (Required) Function called upon submission of form
    */
    'handleSubmit': (inputEvent: Event) => void;
    /**
    * Used for form section header
    */
    'headerText': string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    'primaryFooterContent': string | FunctionalComponent;
    'secondaryFooterContent': string | FunctionalComponent | null;
    /**
    * (Optional) Used as a the default value within the default footer slot
    */
    'submitButtonText'?: string;
  }
  interface AmplifyGoogleButton {
    /**
    * App-specific client ID from Google
    */
    'clientId': FederatedConfig['googleClientId'];
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyGreetings {
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * Logo displayed inside of the header
    */
    'logo': FunctionalComponent | null;
    /**
    * Override default styling
    */
    'overrideStyle': boolean;
    /**
    * Used for the username to be passed to resend code
    */
    'user': CognitoUserInterface;
  }
  interface AmplifyHint {
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyIcon {
    /**
    * (Required) Name of icon used to determine the icon rendered
    */
    'name': IconNameType;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyIconButton {
    'autoShowTooltip': boolean;
    'name': IconNameType;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
    'tooltip': string | null;
  }
  interface AmplifyInput {
    /**
    * The text of the description.  Goes just below the label.
    */
    'description': string | null;
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * The ID of the field.  Should match with its corresponding input's ID.
    */
    'fieldId': string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * (Optional) String value for the name of the input.
    */
    'name'?: string;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
    /**
    * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
    */
    'placeholder'?: string;
    /**
    * The input type.  Can be any HTML input type.
    */
    'type'?: TextFieldTypes;
    /**
    * The value of the content inside of the input field
    */
    'value': string;
  }
  interface AmplifyLabel {
    'htmlFor': string;
    'overrideStyle': boolean;
  }
  interface AmplifyLink {
    'overrideStyle': boolean;
    'role': string;
  }
  interface AmplifyNav {}
  interface AmplifyOauthButton {
    'config': FederatedConfig['oauthConfig'];
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyPasswordField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId': string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Used as the hint in case you forgot your password, etc.
    */
    'hint': string | FunctionalComponent | null;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the password label
    */
    'label': string;
    /**
    * Used for the placeholder label
    */
    'placeholder': string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required': boolean;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyPhoneField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId': string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Used as the hint in case you forgot your confirmation code, etc.
    */
    'hint': string | FunctionalComponent | null;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the Phone label
    */
    'label': string;
    /**
    * Used for the placeholder label
    */
    'placeholder': string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required': boolean;
    /**
    * The value of the content inside of the input field
    */
    'value': string;
  }
  interface AmplifyRadioButton {
    /**
    * If `true`, the radio button is selected.
    */
    'checked': boolean;
    /**
    * If `true`, the checkbox is disabled
    */
    'disabled': boolean;
    /**
    * Field ID used for the 'for' in the label
    */
    'fieldId': string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Label for the radio button
    */
    'label': string;
    /**
    * (Optional) Name of radio button
    */
    'name'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
    /**
    * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
    */
    'placeholder'?: string;
    /**
    * (Optional) Value of radio button
    */
    'value'?: string;
  }
  interface AmplifyRequireNewPassword {
    /**
    * The form fields displayed inside of the forgot password form
    */
    'formFields': FormFieldTypes;
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * The function called when submitting a new password
    */
    'handleSubmit': (event: Event) => void;
    /**
    * The header text of the forgot password section
    */
    'headerText': string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
    /**
    * The text displayed inside of the submit button for the form
    */
    'submitButtonText': string;
    /**
    * Used for the username to be passed to resend code
    */
    'user': CognitoUserInterface;
  }
  interface AmplifyScene {
    'sceneName': string;
  }
  interface AmplifySceneLoading {
    'loadPercentage': number;
    'sceneError': AmplifySceneError | null;
    'sceneName': string;
  }
  interface AmplifySection {
    'overrideStyle'?: boolean;
    'role': string;
  }
  interface AmplifySelect {
    /**
    * Used for id field
    */
    'fieldId': string;
    /**
    * The callback, called when the select is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * The options of the select input. Must be an Array of Objects with an Object shape of {label: string, value: string|number}
    */
    'options': SelectOptionsString | SelectOptionsNumber;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifySelectMfaType {
    /**
    * Types of MFA options
    */
    'MFATypes': MFATypesInterface;
    /**
    * Current authenticated user in order to sign requests properly for TOTP
    */
    'authData': CognitoUserInterface;
    /**
    * Fires when Verify is clicked
    */
    'handleSubmit': (submitEvent: Event) => void;
  }
  interface AmplifySignIn {
    /**
    * Federated credentials & configuration.
    */
    'federated': FederatedConfig;
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields': FormFieldTypes | string[];
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * Fires when sign in form is submitted
    */
    'handleSubmit': (Event: Event) => void;
    /**
    * Used for header text in sign in component
    */
    'headerText': string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
    /**
    * Used for the submit button text in sign in component
    */
    'submitButtonText': string;
    /**
    * Engages when invalid actions occur, such as missing field, etc.
    */
    'validationErrors': string;
  }
  interface AmplifySignInButton {
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
    'provider': 'amazon' | 'auth0' | 'facebook' | 'google' | 'oauth';
  }
  interface AmplifySignOut {
    /**
    * Text inside of the Sign Out button
    */
    'buttonText': string;
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifySignUp {
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields': FormFieldTypes | string[];
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * Fires when sign up form is submitted
    */
    'handleSubmit': (submitEvent: Event) => void;
    /**
    * Used for the submit button text in sign up component
    */
    'haveAccountText': string;
    /**
    * Used for header text in sign up component
    */
    'headerText': string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle': boolean;
    /**
    * Used for the submit button text in sign up component
    */
    'signInText': string;
    /**
    * Used for the submit button text in sign up component
    */
    'submitButtonText': string;
    /**
    * Engages when invalid actions occur, such as missing field, etc.
    */
    'validationErrors': string;
  }
  interface AmplifyStrike {
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
  }
  interface AmplifyToast {
    /**
    * Used in order to add a dismissable `x` for the Toast component
    */
    'onClose': () => void;
  }
  interface AmplifyTooltip {
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
    /**
    * (Optional) Whether or not the tooltip should be automatically shown, i.e. not disappear when not hovered
    */
    'shouldAutoShow': boolean;
    /**
    * (Required) The text in the tooltip
    */
    'text': string;
  }
  interface AmplifyTotpSetup {
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * Used in order to configure TOTP for a user
    */
    'user': CognitoUserInterface;
  }
  interface AmplifyUsernameField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId': string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the username label
    */
    'label': string;
    /**
    * Used for the placeholder label
    */
    'placeholder': string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required': boolean;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyVerifyContact {
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange': AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle': boolean;
    /**
    * Used for the username to be passed to resend code
    */
    'user': CognitoUserInterface;
  }
  interface RockPaperScissor {
    'icon': Function;
  }
}

declare global {


  interface HTMLAmplifyAmazonButtonElement extends Components.AmplifyAmazonButton, HTMLStencilElement {}
  var HTMLAmplifyAmazonButtonElement: {
    prototype: HTMLAmplifyAmazonButtonElement;
    new (): HTMLAmplifyAmazonButtonElement;
  };

  interface HTMLAmplifyAuthFieldsElement extends Components.AmplifyAuthFields, HTMLStencilElement {}
  var HTMLAmplifyAuthFieldsElement: {
    prototype: HTMLAmplifyAuthFieldsElement;
    new (): HTMLAmplifyAuthFieldsElement;
  };

  interface HTMLAmplifyAuth0ButtonElement extends Components.AmplifyAuth0Button, HTMLStencilElement {}
  var HTMLAmplifyAuth0ButtonElement: {
    prototype: HTMLAmplifyAuth0ButtonElement;
    new (): HTMLAmplifyAuth0ButtonElement;
  };

  interface HTMLAmplifyAuthenticatorElement extends Components.AmplifyAuthenticator, HTMLStencilElement {}
  var HTMLAmplifyAuthenticatorElement: {
    prototype: HTMLAmplifyAuthenticatorElement;
    new (): HTMLAmplifyAuthenticatorElement;
  };

  interface HTMLAmplifyButtonElement extends Components.AmplifyButton, HTMLStencilElement {}
  var HTMLAmplifyButtonElement: {
    prototype: HTMLAmplifyButtonElement;
    new (): HTMLAmplifyButtonElement;
  };

  interface HTMLAmplifyCheckboxElement extends Components.AmplifyCheckbox, HTMLStencilElement {}
  var HTMLAmplifyCheckboxElement: {
    prototype: HTMLAmplifyCheckboxElement;
    new (): HTMLAmplifyCheckboxElement;
  };

  interface HTMLAmplifyCodeFieldElement extends Components.AmplifyCodeField, HTMLStencilElement {}
  var HTMLAmplifyCodeFieldElement: {
    prototype: HTMLAmplifyCodeFieldElement;
    new (): HTMLAmplifyCodeFieldElement;
  };

  interface HTMLAmplifyConfirmSignInElement extends Components.AmplifyConfirmSignIn, HTMLStencilElement {}
  var HTMLAmplifyConfirmSignInElement: {
    prototype: HTMLAmplifyConfirmSignInElement;
    new (): HTMLAmplifyConfirmSignInElement;
  };

  interface HTMLAmplifyConfirmSignUpElement extends Components.AmplifyConfirmSignUp, HTMLStencilElement {}
  var HTMLAmplifyConfirmSignUpElement: {
    prototype: HTMLAmplifyConfirmSignUpElement;
    new (): HTMLAmplifyConfirmSignUpElement;
  };

  interface HTMLAmplifyCountryDialCodeElement extends Components.AmplifyCountryDialCode, HTMLStencilElement {}
  var HTMLAmplifyCountryDialCodeElement: {
    prototype: HTMLAmplifyCountryDialCodeElement;
    new (): HTMLAmplifyCountryDialCodeElement;
  };

  interface HTMLAmplifyEmailFieldElement extends Components.AmplifyEmailField, HTMLStencilElement {}
  var HTMLAmplifyEmailFieldElement: {
    prototype: HTMLAmplifyEmailFieldElement;
    new (): HTMLAmplifyEmailFieldElement;
  };

  interface HTMLAmplifyExamplesElement extends Components.AmplifyExamples, HTMLStencilElement {}
  var HTMLAmplifyExamplesElement: {
    prototype: HTMLAmplifyExamplesElement;
    new (): HTMLAmplifyExamplesElement;
  };

  interface HTMLAmplifyFacebookButtonElement extends Components.AmplifyFacebookButton, HTMLStencilElement {}
  var HTMLAmplifyFacebookButtonElement: {
    prototype: HTMLAmplifyFacebookButtonElement;
    new (): HTMLAmplifyFacebookButtonElement;
  };

  interface HTMLAmplifyFederatedButtonsElement extends Components.AmplifyFederatedButtons, HTMLStencilElement {}
  var HTMLAmplifyFederatedButtonsElement: {
    prototype: HTMLAmplifyFederatedButtonsElement;
    new (): HTMLAmplifyFederatedButtonsElement;
  };

  interface HTMLAmplifyFederatedSignInElement extends Components.AmplifyFederatedSignIn, HTMLStencilElement {}
  var HTMLAmplifyFederatedSignInElement: {
    prototype: HTMLAmplifyFederatedSignInElement;
    new (): HTMLAmplifyFederatedSignInElement;
  };

  interface HTMLAmplifyForgotPasswordElement extends Components.AmplifyForgotPassword, HTMLStencilElement {}
  var HTMLAmplifyForgotPasswordElement: {
    prototype: HTMLAmplifyForgotPasswordElement;
    new (): HTMLAmplifyForgotPasswordElement;
  };

  interface HTMLAmplifyFormFieldElement extends Components.AmplifyFormField, HTMLStencilElement {}
  var HTMLAmplifyFormFieldElement: {
    prototype: HTMLAmplifyFormFieldElement;
    new (): HTMLAmplifyFormFieldElement;
  };

  interface HTMLAmplifyFormSectionElement extends Components.AmplifyFormSection, HTMLStencilElement {}
  var HTMLAmplifyFormSectionElement: {
    prototype: HTMLAmplifyFormSectionElement;
    new (): HTMLAmplifyFormSectionElement;
  };

  interface HTMLAmplifyGoogleButtonElement extends Components.AmplifyGoogleButton, HTMLStencilElement {}
  var HTMLAmplifyGoogleButtonElement: {
    prototype: HTMLAmplifyGoogleButtonElement;
    new (): HTMLAmplifyGoogleButtonElement;
  };

  interface HTMLAmplifyGreetingsElement extends Components.AmplifyGreetings, HTMLStencilElement {}
  var HTMLAmplifyGreetingsElement: {
    prototype: HTMLAmplifyGreetingsElement;
    new (): HTMLAmplifyGreetingsElement;
  };

  interface HTMLAmplifyHintElement extends Components.AmplifyHint, HTMLStencilElement {}
  var HTMLAmplifyHintElement: {
    prototype: HTMLAmplifyHintElement;
    new (): HTMLAmplifyHintElement;
  };

  interface HTMLAmplifyIconElement extends Components.AmplifyIcon, HTMLStencilElement {}
  var HTMLAmplifyIconElement: {
    prototype: HTMLAmplifyIconElement;
    new (): HTMLAmplifyIconElement;
  };

  interface HTMLAmplifyIconButtonElement extends Components.AmplifyIconButton, HTMLStencilElement {}
  var HTMLAmplifyIconButtonElement: {
    prototype: HTMLAmplifyIconButtonElement;
    new (): HTMLAmplifyIconButtonElement;
  };

  interface HTMLAmplifyInputElement extends Components.AmplifyInput, HTMLStencilElement {}
  var HTMLAmplifyInputElement: {
    prototype: HTMLAmplifyInputElement;
    new (): HTMLAmplifyInputElement;
  };

  interface HTMLAmplifyLabelElement extends Components.AmplifyLabel, HTMLStencilElement {}
  var HTMLAmplifyLabelElement: {
    prototype: HTMLAmplifyLabelElement;
    new (): HTMLAmplifyLabelElement;
  };

  interface HTMLAmplifyLinkElement extends Components.AmplifyLink, HTMLStencilElement {}
  var HTMLAmplifyLinkElement: {
    prototype: HTMLAmplifyLinkElement;
    new (): HTMLAmplifyLinkElement;
  };

  interface HTMLAmplifyNavElement extends Components.AmplifyNav, HTMLStencilElement {}
  var HTMLAmplifyNavElement: {
    prototype: HTMLAmplifyNavElement;
    new (): HTMLAmplifyNavElement;
  };

  interface HTMLAmplifyOauthButtonElement extends Components.AmplifyOauthButton, HTMLStencilElement {}
  var HTMLAmplifyOauthButtonElement: {
    prototype: HTMLAmplifyOauthButtonElement;
    new (): HTMLAmplifyOauthButtonElement;
  };

  interface HTMLAmplifyPasswordFieldElement extends Components.AmplifyPasswordField, HTMLStencilElement {}
  var HTMLAmplifyPasswordFieldElement: {
    prototype: HTMLAmplifyPasswordFieldElement;
    new (): HTMLAmplifyPasswordFieldElement;
  };

  interface HTMLAmplifyPhoneFieldElement extends Components.AmplifyPhoneField, HTMLStencilElement {}
  var HTMLAmplifyPhoneFieldElement: {
    prototype: HTMLAmplifyPhoneFieldElement;
    new (): HTMLAmplifyPhoneFieldElement;
  };

  interface HTMLAmplifyRadioButtonElement extends Components.AmplifyRadioButton, HTMLStencilElement {}
  var HTMLAmplifyRadioButtonElement: {
    prototype: HTMLAmplifyRadioButtonElement;
    new (): HTMLAmplifyRadioButtonElement;
  };

  interface HTMLAmplifyRequireNewPasswordElement extends Components.AmplifyRequireNewPassword, HTMLStencilElement {}
  var HTMLAmplifyRequireNewPasswordElement: {
    prototype: HTMLAmplifyRequireNewPasswordElement;
    new (): HTMLAmplifyRequireNewPasswordElement;
  };

  interface HTMLAmplifySceneElement extends Components.AmplifyScene, HTMLStencilElement {}
  var HTMLAmplifySceneElement: {
    prototype: HTMLAmplifySceneElement;
    new (): HTMLAmplifySceneElement;
  };

  interface HTMLAmplifySceneLoadingElement extends Components.AmplifySceneLoading, HTMLStencilElement {}
  var HTMLAmplifySceneLoadingElement: {
    prototype: HTMLAmplifySceneLoadingElement;
    new (): HTMLAmplifySceneLoadingElement;
  };

  interface HTMLAmplifySectionElement extends Components.AmplifySection, HTMLStencilElement {}
  var HTMLAmplifySectionElement: {
    prototype: HTMLAmplifySectionElement;
    new (): HTMLAmplifySectionElement;
  };

  interface HTMLAmplifySelectElement extends Components.AmplifySelect, HTMLStencilElement {}
  var HTMLAmplifySelectElement: {
    prototype: HTMLAmplifySelectElement;
    new (): HTMLAmplifySelectElement;
  };

  interface HTMLAmplifySelectMfaTypeElement extends Components.AmplifySelectMfaType, HTMLStencilElement {}
  var HTMLAmplifySelectMfaTypeElement: {
    prototype: HTMLAmplifySelectMfaTypeElement;
    new (): HTMLAmplifySelectMfaTypeElement;
  };

  interface HTMLAmplifySignInElement extends Components.AmplifySignIn, HTMLStencilElement {}
  var HTMLAmplifySignInElement: {
    prototype: HTMLAmplifySignInElement;
    new (): HTMLAmplifySignInElement;
  };

  interface HTMLAmplifySignInButtonElement extends Components.AmplifySignInButton, HTMLStencilElement {}
  var HTMLAmplifySignInButtonElement: {
    prototype: HTMLAmplifySignInButtonElement;
    new (): HTMLAmplifySignInButtonElement;
  };

  interface HTMLAmplifySignOutElement extends Components.AmplifySignOut, HTMLStencilElement {}
  var HTMLAmplifySignOutElement: {
    prototype: HTMLAmplifySignOutElement;
    new (): HTMLAmplifySignOutElement;
  };

  interface HTMLAmplifySignUpElement extends Components.AmplifySignUp, HTMLStencilElement {}
  var HTMLAmplifySignUpElement: {
    prototype: HTMLAmplifySignUpElement;
    new (): HTMLAmplifySignUpElement;
  };

  interface HTMLAmplifyStrikeElement extends Components.AmplifyStrike, HTMLStencilElement {}
  var HTMLAmplifyStrikeElement: {
    prototype: HTMLAmplifyStrikeElement;
    new (): HTMLAmplifyStrikeElement;
  };

  interface HTMLAmplifyToastElement extends Components.AmplifyToast, HTMLStencilElement {}
  var HTMLAmplifyToastElement: {
    prototype: HTMLAmplifyToastElement;
    new (): HTMLAmplifyToastElement;
  };

  interface HTMLAmplifyTooltipElement extends Components.AmplifyTooltip, HTMLStencilElement {}
  var HTMLAmplifyTooltipElement: {
    prototype: HTMLAmplifyTooltipElement;
    new (): HTMLAmplifyTooltipElement;
  };

  interface HTMLAmplifyTotpSetupElement extends Components.AmplifyTotpSetup, HTMLStencilElement {}
  var HTMLAmplifyTotpSetupElement: {
    prototype: HTMLAmplifyTotpSetupElement;
    new (): HTMLAmplifyTotpSetupElement;
  };

  interface HTMLAmplifyUsernameFieldElement extends Components.AmplifyUsernameField, HTMLStencilElement {}
  var HTMLAmplifyUsernameFieldElement: {
    prototype: HTMLAmplifyUsernameFieldElement;
    new (): HTMLAmplifyUsernameFieldElement;
  };

  interface HTMLAmplifyVerifyContactElement extends Components.AmplifyVerifyContact, HTMLStencilElement {}
  var HTMLAmplifyVerifyContactElement: {
    prototype: HTMLAmplifyVerifyContactElement;
    new (): HTMLAmplifyVerifyContactElement;
  };

  interface HTMLRockPaperScissorElement extends Components.RockPaperScissor, HTMLStencilElement {}
  var HTMLRockPaperScissorElement: {
    prototype: HTMLRockPaperScissorElement;
    new (): HTMLRockPaperScissorElement;
  };
  interface HTMLElementTagNameMap {
    'amplify-amazon-button': HTMLAmplifyAmazonButtonElement;
    'amplify-auth-fields': HTMLAmplifyAuthFieldsElement;
    'amplify-auth0-button': HTMLAmplifyAuth0ButtonElement;
    'amplify-authenticator': HTMLAmplifyAuthenticatorElement;
    'amplify-button': HTMLAmplifyButtonElement;
    'amplify-checkbox': HTMLAmplifyCheckboxElement;
    'amplify-code-field': HTMLAmplifyCodeFieldElement;
    'amplify-confirm-sign-in': HTMLAmplifyConfirmSignInElement;
    'amplify-confirm-sign-up': HTMLAmplifyConfirmSignUpElement;
    'amplify-country-dial-code': HTMLAmplifyCountryDialCodeElement;
    'amplify-email-field': HTMLAmplifyEmailFieldElement;
    'amplify-examples': HTMLAmplifyExamplesElement;
    'amplify-facebook-button': HTMLAmplifyFacebookButtonElement;
    'amplify-federated-buttons': HTMLAmplifyFederatedButtonsElement;
    'amplify-federated-sign-in': HTMLAmplifyFederatedSignInElement;
    'amplify-forgot-password': HTMLAmplifyForgotPasswordElement;
    'amplify-form-field': HTMLAmplifyFormFieldElement;
    'amplify-form-section': HTMLAmplifyFormSectionElement;
    'amplify-google-button': HTMLAmplifyGoogleButtonElement;
    'amplify-greetings': HTMLAmplifyGreetingsElement;
    'amplify-hint': HTMLAmplifyHintElement;
    'amplify-icon': HTMLAmplifyIconElement;
    'amplify-icon-button': HTMLAmplifyIconButtonElement;
    'amplify-input': HTMLAmplifyInputElement;
    'amplify-label': HTMLAmplifyLabelElement;
    'amplify-link': HTMLAmplifyLinkElement;
    'amplify-nav': HTMLAmplifyNavElement;
    'amplify-oauth-button': HTMLAmplifyOauthButtonElement;
    'amplify-password-field': HTMLAmplifyPasswordFieldElement;
    'amplify-phone-field': HTMLAmplifyPhoneFieldElement;
    'amplify-radio-button': HTMLAmplifyRadioButtonElement;
    'amplify-require-new-password': HTMLAmplifyRequireNewPasswordElement;
    'amplify-scene': HTMLAmplifySceneElement;
    'amplify-scene-loading': HTMLAmplifySceneLoadingElement;
    'amplify-section': HTMLAmplifySectionElement;
    'amplify-select': HTMLAmplifySelectElement;
    'amplify-select-mfa-type': HTMLAmplifySelectMfaTypeElement;
    'amplify-sign-in': HTMLAmplifySignInElement;
    'amplify-sign-in-button': HTMLAmplifySignInButtonElement;
    'amplify-sign-out': HTMLAmplifySignOutElement;
    'amplify-sign-up': HTMLAmplifySignUpElement;
    'amplify-strike': HTMLAmplifyStrikeElement;
    'amplify-toast': HTMLAmplifyToastElement;
    'amplify-tooltip': HTMLAmplifyTooltipElement;
    'amplify-totp-setup': HTMLAmplifyTotpSetupElement;
    'amplify-username-field': HTMLAmplifyUsernameFieldElement;
    'amplify-verify-contact': HTMLAmplifyVerifyContactElement;
    'rock-paper-scissor': HTMLRockPaperScissorElement;
  }
}

declare namespace LocalJSX {
  interface AmplifyAmazonButton {
    /**
    * App-specific client ID from Google
    */
    'clientId'?: FederatedConfig['amazonClientId'];
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyAuthFields {
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields'?: FormFieldTypes | string[];
  }
  interface AmplifyAuth0Button {
    /**
    * See: https://auth0.com/docs/libraries/auth0js/v9#available-parameters
    */
    'config'?: FederatedConfig['auth0Config'];
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyAuthenticator {
    /**
    * Federated credentials & configuration.
    */
    'federated'?: FederatedConfig;
    /**
    * Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp
    */
    'initialAuthState'?: AuthState;
  }
  interface AmplifyButton {
    /**
    * (Optional) Callback called when a user clicks on the button
    */
    'handleButtonClick'?: (evt: Event) => void;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
    /**
    * Type of the button: 'button', 'submit' or 'reset'
    */
    'type'?: ButtonTypes;
  }
  interface AmplifyCheckbox {
    /**
    * If `true`, the checkbox is selected.
    */
    'checked'?: boolean;
    /**
    * If `true`, the checkbox is disabled
    */
    'disabled'?: boolean;
    /**
    * Field ID used for the 'htmlFor' in the label
    */
    'fieldId'?: string;
    /**
    * Label for the checkbox
    */
    'label'?: string;
    /**
    * Name of the checkbox
    */
    'name'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    /**
    * Value of the checkbox
    */
    'value'?: string;
  }
  interface AmplifyCodeField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId'?: string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Used as the hint in case you forgot your confirmation code, etc.
    */
    'hint'?: string | FunctionalComponent | null;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the code label
    */
    'label'?: string;
    /**
    * Used for the placeholder label
    */
    'placeholder'?: string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required'?: boolean;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyConfirmSignIn {
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields'?: FormFieldTypes | string[];
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * Fires when confirm sign in form is submitted
    */
    'handleSubmit'?: (Event: Event) => void;
    /**
    * Used for header text in confirm sign in component
    */
    'headerText'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    /**
    * Used for the submit button text in confirm sign in component
    */
    'submitButtonText'?: string;
    /**
    * Cognito user signing in
    */
    'user'?: CognitoUserInterface;
    /**
    * Engages when invalid actions occur, such as missing field, etc.
    */
    'validationErrors'?: string;
  }
  interface AmplifyConfirmSignUp {
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields'?: FormFieldTypes | string[];
    /**
    * Passed from the Authenticator component in order to change Authentication states e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * Fires when sign up form is submitted
    */
    'handleSubmit'?: (submitEvent: Event) => void;
    /**
    * Used for header text in confirm sign up component
    */
    'headerText'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    /**
    * Used for the submit button text in confirm sign up component
    */
    'submitButtonText'?: string;
    /**
    * Used for the username to be passed to resend code
    */
    'user'?: CognitoUserInterface;
    /**
    * Engages when invalid actions occur, such as missing field, etc.
    */
    'validationErrors'?: string;
  }
  interface AmplifyCountryDialCode {
    /**
    * The ID of the field.  Should match with its corresponding input's ID.
    */
    'fieldId'?: string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * The options of the country dial code select input.
    */
    'options'?: CountryCodeDialOptions;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyEmailField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId'?: string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the EMAIL label
    */
    'label'?: string;
    /**
    * Used for the placeholder label
    */
    'placeholder'?: string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required'?: boolean;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyExamples {}
  interface AmplifyFacebookButton {
    /**
    * App-specific client ID from Facebook
    */
    'appId'?: FederatedConfig['facebookAppId'];
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyFederatedButtons {
    /**
    * The current authentication state.
    */
    'authState'?: AuthState;
    /**
    * Federated credentials & configuration.
    */
    'federated'?: FederatedConfig;
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyFederatedSignIn {
    /**
    * The current authentication state.
    */
    'authState'?: AuthState;
    /**
    * Federated credentials & configuration.
    */
    'federated'?: any;
  }
  interface AmplifyForgotPassword {
    /**
    * The form fields displayed inside of the forgot password form
    */
    'formFields'?: FormFieldTypes;
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * The function called when making a request to reset password
    */
    'handleSend'?: (event: Event) => void;
    /**
    * The function called when submitting a new password
    */
    'handleSubmit'?: (event: Event) => void;
    /**
    * The header text of the forgot password section
    */
    'headerText'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    /**
    * The text displayed inside of the submit button for the form
    */
    'submitButtonText'?: string;
  }
  interface AmplifyFormField {
    /**
    * The text of the description.  Goes between the label and the input.
    */
    'description'?: string | null;
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * The ID of the field.  Should match with its corresponding input's ID.
    */
    'fieldId'?: string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * The text of a hint to the user as to how to fill out the input.  Goes just below the input.
    */
    'hint'?: string | FunctionalComponent | null;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * The text of the label.  Goes above the input. Ex: 'First name'
    */
    'label'?: string | null;
    /**
    * (Optional) String value for the name of the input.
    */
    'name'?: string;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
    /**
    * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
    */
    'placeholder'?: string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required'?: boolean;
    /**
    * The input type.  Can be any HTML input type.
    */
    'type'?: TextFieldTypes;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyFormSection {
    /**
    * (Required) Function called upon submission of form
    */
    'handleSubmit'?: (inputEvent: Event) => void;
    /**
    * Used for form section header
    */
    'headerText'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    'primaryFooterContent'?: string | FunctionalComponent;
    'secondaryFooterContent'?: string | FunctionalComponent | null;
    /**
    * (Optional) Used as a the default value within the default footer slot
    */
    'submitButtonText'?: string;
  }
  interface AmplifyGoogleButton {
    /**
    * App-specific client ID from Google
    */
    'clientId'?: FederatedConfig['googleClientId'];
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyGreetings {
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * Logo displayed inside of the header
    */
    'logo'?: FunctionalComponent | null;
    /**
    * Override default styling
    */
    'overrideStyle'?: boolean;
    /**
    * Used for the username to be passed to resend code
    */
    'user'?: CognitoUserInterface;
  }
  interface AmplifyHint {
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyIcon {
    /**
    * (Required) Name of icon used to determine the icon rendered
    */
    'name'?: IconNameType;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyIconButton {
    'autoShowTooltip'?: boolean;
    'name'?: IconNameType;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
    'tooltip'?: string | null;
  }
  interface AmplifyInput {
    /**
    * The text of the description.  Goes just below the label.
    */
    'description'?: string | null;
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * The ID of the field.  Should match with its corresponding input's ID.
    */
    'fieldId'?: string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * (Optional) String value for the name of the input.
    */
    'name'?: string;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
    /**
    * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
    */
    'placeholder'?: string;
    /**
    * The input type.  Can be any HTML input type.
    */
    'type'?: TextFieldTypes;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyLabel {
    'htmlFor'?: string;
    'overrideStyle'?: boolean;
  }
  interface AmplifyLink {
    'overrideStyle'?: boolean;
    'role'?: string;
  }
  interface AmplifyNav {}
  interface AmplifyOauthButton {
    'config'?: FederatedConfig['oauthConfig'];
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyPasswordField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId'?: string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Used as the hint in case you forgot your password, etc.
    */
    'hint'?: string | FunctionalComponent | null;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the password label
    */
    'label'?: string;
    /**
    * Used for the placeholder label
    */
    'placeholder'?: string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required'?: boolean;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyPhoneField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId'?: string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Used as the hint in case you forgot your confirmation code, etc.
    */
    'hint'?: string | FunctionalComponent | null;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the Phone label
    */
    'label'?: string;
    /**
    * Used for the placeholder label
    */
    'placeholder'?: string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required'?: boolean;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyRadioButton {
    /**
    * If `true`, the radio button is selected.
    */
    'checked'?: boolean;
    /**
    * If `true`, the checkbox is disabled
    */
    'disabled'?: boolean;
    /**
    * Field ID used for the 'for' in the label
    */
    'fieldId'?: string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Label for the radio button
    */
    'label'?: string;
    /**
    * (Optional) Name of radio button
    */
    'name'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    /**
    * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
    */
    'placeholder'?: string;
    /**
    * (Optional) Value of radio button
    */
    'value'?: string;
  }
  interface AmplifyRequireNewPassword {
    /**
    * The form fields displayed inside of the forgot password form
    */
    'formFields'?: FormFieldTypes;
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * The function called when submitting a new password
    */
    'handleSubmit'?: (event: Event) => void;
    /**
    * The header text of the forgot password section
    */
    'headerText'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    /**
    * The text displayed inside of the submit button for the form
    */
    'submitButtonText'?: string;
    /**
    * Used for the username to be passed to resend code
    */
    'user'?: CognitoUserInterface;
  }
  interface AmplifyScene {
    'sceneName'?: string;
  }
  interface AmplifySceneLoading {
    'loadPercentage'?: number;
    'sceneError'?: AmplifySceneError | null;
    'sceneName'?: string;
  }
  interface AmplifySection {
    'overrideStyle'?: boolean;
    'role'?: string;
  }
  interface AmplifySelect {
    /**
    * Used for id field
    */
    'fieldId'?: string;
    /**
    * The callback, called when the select is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * The options of the select input. Must be an Array of Objects with an Object shape of {label: string, value: string|number}
    */
    'options'?: SelectOptionsString | SelectOptionsNumber;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifySelectMfaType {
    /**
    * Types of MFA options
    */
    'MFATypes'?: MFATypesInterface;
    /**
    * Current authenticated user in order to sign requests properly for TOTP
    */
    'authData'?: CognitoUserInterface;
    /**
    * Fires when Verify is clicked
    */
    'handleSubmit'?: (submitEvent: Event) => void;
  }
  interface AmplifySignIn {
    /**
    * Federated credentials & configuration.
    */
    'federated'?: FederatedConfig;
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields'?: FormFieldTypes | string[];
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * Fires when sign in form is submitted
    */
    'handleSubmit'?: (Event: Event) => void;
    /**
    * Used for header text in sign in component
    */
    'headerText'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    /**
    * Used for the submit button text in sign in component
    */
    'submitButtonText'?: string;
    /**
    * Engages when invalid actions occur, such as missing field, etc.
    */
    'validationErrors'?: string;
  }
  interface AmplifySignInButton {
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
    'provider'?: 'amazon' | 'auth0' | 'facebook' | 'google' | 'oauth';
  }
  interface AmplifySignOut {
    /**
    * Text inside of the Sign Out button
    */
    'buttonText'?: string;
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifySignUp {
    /**
    * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: 'username'|'password'|'email'|'code'|'default',     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
    */
    'formFields'?: FormFieldTypes | string[];
    /**
    * Passed from the Authenticator component in order to change Authentication state e.g. SignIn -> 'Create Account' link -> SignUp
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * Fires when sign up form is submitted
    */
    'handleSubmit'?: (submitEvent: Event) => void;
    /**
    * Used for the submit button text in sign up component
    */
    'haveAccountText'?: string;
    /**
    * Used for header text in sign up component
    */
    'headerText'?: string;
    /**
    * (Optional) Overrides default styling
    */
    'overrideStyle'?: boolean;
    /**
    * Used for the submit button text in sign up component
    */
    'signInText'?: string;
    /**
    * Used for the submit button text in sign up component
    */
    'submitButtonText'?: string;
    /**
    * Engages when invalid actions occur, such as missing field, etc.
    */
    'validationErrors'?: string;
  }
  interface AmplifyStrike {
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
  }
  interface AmplifyToast {
    /**
    * Used in order to add a dismissable `x` for the Toast component
    */
    'onClose'?: () => void;
  }
  interface AmplifyTooltip {
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
    /**
    * (Optional) Whether or not the tooltip should be automatically shown, i.e. not disappear when not hovered
    */
    'shouldAutoShow'?: boolean;
    /**
    * (Required) The text in the tooltip
    */
    'text'?: string;
  }
  interface AmplifyTotpSetup {
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * Used in order to configure TOTP for a user
    */
    'user'?: CognitoUserInterface;
  }
  interface AmplifyUsernameField {
    /**
    * Will disable the input if set to true
    */
    'disabled'?: boolean;
    /**
    * Based on the type of field e.g. sign in, sign up, forgot password, etc.
    */
    'fieldId'?: string;
    /**
    * The callback, called when the input is modified by the user.
    */
    'handleInputChange'?: (inputEvent: Event) => void;
    /**
    * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
    */
    'inputProps'?: object;
    /**
    * Used for the username label
    */
    'label'?: string;
    /**
    * Used for the placeholder label
    */
    'placeholder'?: string;
    /**
    * The required flag in order to make an input required prior to submitting a form
    */
    'required'?: boolean;
    /**
    * The value of the content inside of the input field
    */
    'value'?: string;
  }
  interface AmplifyVerifyContact {
    /**
    * Passed from the Authenticator component in order to change Authentication state
    */
    'handleAuthStateChange'?: AuthStateHandler;
    /**
    * (Optional) Override default styling
    */
    'overrideStyle'?: boolean;
    /**
    * Used for the username to be passed to resend code
    */
    'user'?: CognitoUserInterface;
  }
  interface RockPaperScissor {
    'icon'?: Function;
    'onIconChange'?: (event: CustomEvent<any>) => void;
  }

  interface IntrinsicElements {
    'amplify-amazon-button': AmplifyAmazonButton;
    'amplify-auth-fields': AmplifyAuthFields;
    'amplify-auth0-button': AmplifyAuth0Button;
    'amplify-authenticator': AmplifyAuthenticator;
    'amplify-button': AmplifyButton;
    'amplify-checkbox': AmplifyCheckbox;
    'amplify-code-field': AmplifyCodeField;
    'amplify-confirm-sign-in': AmplifyConfirmSignIn;
    'amplify-confirm-sign-up': AmplifyConfirmSignUp;
    'amplify-country-dial-code': AmplifyCountryDialCode;
    'amplify-email-field': AmplifyEmailField;
    'amplify-examples': AmplifyExamples;
    'amplify-facebook-button': AmplifyFacebookButton;
    'amplify-federated-buttons': AmplifyFederatedButtons;
    'amplify-federated-sign-in': AmplifyFederatedSignIn;
    'amplify-forgot-password': AmplifyForgotPassword;
    'amplify-form-field': AmplifyFormField;
    'amplify-form-section': AmplifyFormSection;
    'amplify-google-button': AmplifyGoogleButton;
    'amplify-greetings': AmplifyGreetings;
    'amplify-hint': AmplifyHint;
    'amplify-icon': AmplifyIcon;
    'amplify-icon-button': AmplifyIconButton;
    'amplify-input': AmplifyInput;
    'amplify-label': AmplifyLabel;
    'amplify-link': AmplifyLink;
    'amplify-nav': AmplifyNav;
    'amplify-oauth-button': AmplifyOauthButton;
    'amplify-password-field': AmplifyPasswordField;
    'amplify-phone-field': AmplifyPhoneField;
    'amplify-radio-button': AmplifyRadioButton;
    'amplify-require-new-password': AmplifyRequireNewPassword;
    'amplify-scene': AmplifyScene;
    'amplify-scene-loading': AmplifySceneLoading;
    'amplify-section': AmplifySection;
    'amplify-select': AmplifySelect;
    'amplify-select-mfa-type': AmplifySelectMfaType;
    'amplify-sign-in': AmplifySignIn;
    'amplify-sign-in-button': AmplifySignInButton;
    'amplify-sign-out': AmplifySignOut;
    'amplify-sign-up': AmplifySignUp;
    'amplify-strike': AmplifyStrike;
    'amplify-toast': AmplifyToast;
    'amplify-tooltip': AmplifyTooltip;
    'amplify-totp-setup': AmplifyTotpSetup;
    'amplify-username-field': AmplifyUsernameField;
    'amplify-verify-contact': AmplifyVerifyContact;
    'rock-paper-scissor': RockPaperScissor;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'amplify-amazon-button': LocalJSX.AmplifyAmazonButton & JSXBase.HTMLAttributes<HTMLAmplifyAmazonButtonElement>;
      'amplify-auth-fields': LocalJSX.AmplifyAuthFields & JSXBase.HTMLAttributes<HTMLAmplifyAuthFieldsElement>;
      'amplify-auth0-button': LocalJSX.AmplifyAuth0Button & JSXBase.HTMLAttributes<HTMLAmplifyAuth0ButtonElement>;
      'amplify-authenticator': LocalJSX.AmplifyAuthenticator & JSXBase.HTMLAttributes<HTMLAmplifyAuthenticatorElement>;
      'amplify-button': LocalJSX.AmplifyButton & JSXBase.HTMLAttributes<HTMLAmplifyButtonElement>;
      'amplify-checkbox': LocalJSX.AmplifyCheckbox & JSXBase.HTMLAttributes<HTMLAmplifyCheckboxElement>;
      'amplify-code-field': LocalJSX.AmplifyCodeField & JSXBase.HTMLAttributes<HTMLAmplifyCodeFieldElement>;
      'amplify-confirm-sign-in': LocalJSX.AmplifyConfirmSignIn & JSXBase.HTMLAttributes<HTMLAmplifyConfirmSignInElement>;
      'amplify-confirm-sign-up': LocalJSX.AmplifyConfirmSignUp & JSXBase.HTMLAttributes<HTMLAmplifyConfirmSignUpElement>;
      'amplify-country-dial-code': LocalJSX.AmplifyCountryDialCode & JSXBase.HTMLAttributes<HTMLAmplifyCountryDialCodeElement>;
      'amplify-email-field': LocalJSX.AmplifyEmailField & JSXBase.HTMLAttributes<HTMLAmplifyEmailFieldElement>;
      'amplify-examples': LocalJSX.AmplifyExamples & JSXBase.HTMLAttributes<HTMLAmplifyExamplesElement>;
      'amplify-facebook-button': LocalJSX.AmplifyFacebookButton & JSXBase.HTMLAttributes<HTMLAmplifyFacebookButtonElement>;
      'amplify-federated-buttons': LocalJSX.AmplifyFederatedButtons & JSXBase.HTMLAttributes<HTMLAmplifyFederatedButtonsElement>;
      'amplify-federated-sign-in': LocalJSX.AmplifyFederatedSignIn & JSXBase.HTMLAttributes<HTMLAmplifyFederatedSignInElement>;
      'amplify-forgot-password': LocalJSX.AmplifyForgotPassword & JSXBase.HTMLAttributes<HTMLAmplifyForgotPasswordElement>;
      'amplify-form-field': LocalJSX.AmplifyFormField & JSXBase.HTMLAttributes<HTMLAmplifyFormFieldElement>;
      'amplify-form-section': LocalJSX.AmplifyFormSection & JSXBase.HTMLAttributes<HTMLAmplifyFormSectionElement>;
      'amplify-google-button': LocalJSX.AmplifyGoogleButton & JSXBase.HTMLAttributes<HTMLAmplifyGoogleButtonElement>;
      'amplify-greetings': LocalJSX.AmplifyGreetings & JSXBase.HTMLAttributes<HTMLAmplifyGreetingsElement>;
      'amplify-hint': LocalJSX.AmplifyHint & JSXBase.HTMLAttributes<HTMLAmplifyHintElement>;
      'amplify-icon': LocalJSX.AmplifyIcon & JSXBase.HTMLAttributes<HTMLAmplifyIconElement>;
      'amplify-icon-button': LocalJSX.AmplifyIconButton & JSXBase.HTMLAttributes<HTMLAmplifyIconButtonElement>;
      'amplify-input': LocalJSX.AmplifyInput & JSXBase.HTMLAttributes<HTMLAmplifyInputElement>;
      'amplify-label': LocalJSX.AmplifyLabel & JSXBase.HTMLAttributes<HTMLAmplifyLabelElement>;
      'amplify-link': LocalJSX.AmplifyLink & JSXBase.HTMLAttributes<HTMLAmplifyLinkElement>;
      'amplify-nav': LocalJSX.AmplifyNav & JSXBase.HTMLAttributes<HTMLAmplifyNavElement>;
      'amplify-oauth-button': LocalJSX.AmplifyOauthButton & JSXBase.HTMLAttributes<HTMLAmplifyOauthButtonElement>;
      'amplify-password-field': LocalJSX.AmplifyPasswordField & JSXBase.HTMLAttributes<HTMLAmplifyPasswordFieldElement>;
      'amplify-phone-field': LocalJSX.AmplifyPhoneField & JSXBase.HTMLAttributes<HTMLAmplifyPhoneFieldElement>;
      'amplify-radio-button': LocalJSX.AmplifyRadioButton & JSXBase.HTMLAttributes<HTMLAmplifyRadioButtonElement>;
      'amplify-require-new-password': LocalJSX.AmplifyRequireNewPassword & JSXBase.HTMLAttributes<HTMLAmplifyRequireNewPasswordElement>;
      'amplify-scene': LocalJSX.AmplifyScene & JSXBase.HTMLAttributes<HTMLAmplifySceneElement>;
      'amplify-scene-loading': LocalJSX.AmplifySceneLoading & JSXBase.HTMLAttributes<HTMLAmplifySceneLoadingElement>;
      'amplify-section': LocalJSX.AmplifySection & JSXBase.HTMLAttributes<HTMLAmplifySectionElement>;
      'amplify-select': LocalJSX.AmplifySelect & JSXBase.HTMLAttributes<HTMLAmplifySelectElement>;
      'amplify-select-mfa-type': LocalJSX.AmplifySelectMfaType & JSXBase.HTMLAttributes<HTMLAmplifySelectMfaTypeElement>;
      'amplify-sign-in': LocalJSX.AmplifySignIn & JSXBase.HTMLAttributes<HTMLAmplifySignInElement>;
      'amplify-sign-in-button': LocalJSX.AmplifySignInButton & JSXBase.HTMLAttributes<HTMLAmplifySignInButtonElement>;
      'amplify-sign-out': LocalJSX.AmplifySignOut & JSXBase.HTMLAttributes<HTMLAmplifySignOutElement>;
      'amplify-sign-up': LocalJSX.AmplifySignUp & JSXBase.HTMLAttributes<HTMLAmplifySignUpElement>;
      'amplify-strike': LocalJSX.AmplifyStrike & JSXBase.HTMLAttributes<HTMLAmplifyStrikeElement>;
      'amplify-toast': LocalJSX.AmplifyToast & JSXBase.HTMLAttributes<HTMLAmplifyToastElement>;
      'amplify-tooltip': LocalJSX.AmplifyTooltip & JSXBase.HTMLAttributes<HTMLAmplifyTooltipElement>;
      'amplify-totp-setup': LocalJSX.AmplifyTotpSetup & JSXBase.HTMLAttributes<HTMLAmplifyTotpSetupElement>;
      'amplify-username-field': LocalJSX.AmplifyUsernameField & JSXBase.HTMLAttributes<HTMLAmplifyUsernameFieldElement>;
      'amplify-verify-contact': LocalJSX.AmplifyVerifyContact & JSXBase.HTMLAttributes<HTMLAmplifyVerifyContactElement>;
      'rock-paper-scissor': LocalJSX.RockPaperScissor & JSXBase.HTMLAttributes<HTMLRockPaperScissorElement>;
    }
  }
}


